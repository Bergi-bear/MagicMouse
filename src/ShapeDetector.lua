---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Bergi.
--- DateTime: 01.12.2021 19:34
---
---

squareCount = 0;
sharpCount = 0;
obtuseCount = 0;
rangeForSquareAngle = 25

sides = {}
previousDirection = 0

function Distance(vector1, vector2)
    return DistanceBetweenXY(vector1.x, vector1.y, vector2.x, vector2.y)
end

function ShapeDetectorAdd(current, previous)

    if (current == 0 or previous == 0) then return end

    local sensitivity = 15 -- degrees
    local minimumDistanceForSide = 2 * 128

    local direction = VectorSubtract(current, previous)

    if (previousDirection == 0) then
        table.insert(sides, Side:new(current))
        previousDirection = direction
    else
        local angle = math.deg(direction:differenceRegardingUp(previousDirection))
        --print(angle)
        if (angle < sensitivity or angle > 180 - sensitivity) then
            sides[#sides]:changeEnd(current)
        else
            if (sides[#sides]:length() > minimumDistanceForSide) then
                table.insert(sides, Side:new(current))
            else
                sides[#sides] = Side:new(current)
            end
                previousDirection = direction
        end
    end
end

function ShapeDetectorClear()
    local maxDistanceForSquare = 2 * 128
    local maxDistanceForTriangle = 2 * 128
    local maxDistanceForCircle = 3 * 128
    local minDistanceForZ = 2 * 128
    local minDistanceForLine = 2 * 128

    local center = Vector:new(0,0,0)
    for i = 1, #Points do
        center.x = center.x + Points[i].x
        center.y = center.y + Points[i].y
    end
    center.x = center.x / #Points
    center.y = center.y / #Points
    DestroyEffect(CreateTMPEffect(center.x, center.y, "units\\orc\\Peon\\Peon"))

    for i = 1, 20 do
        print("  ")
    end

    for i = 1, #sides do
        print(i.. ". ( ".. sides[i].start.x.. ", ".. sides[i].start.x.. " ) ; (".. sides[i].en.x.. ", ".. sides[i].en.y.. ")")
    end

    -- angles
    angles = { }
    function getAngle(i, j)
        local v1 = sides[i].en
        local v2 = sides[j].start
        return math.deg(math.atan(v2.x - v1.y, v2.x - v1.x))
    end

    for i = 1, #sides do
        if (i < #sides) then
            table.insert(angles, getAngle(i + 1, i))
        else
            table.insert(angles, getAngle(1, #sides))
        end
    end

    anglePrint = ""
    for i = 1, #angles do
        anglePrint = anglePrint .. "; " .. i .. " - " .. angles[i]
    end
    print(anglePrint)
    print(#Points)

    -- clearEffects
    for i = 1, #Effects do
        DestroyEffect(Effects[i])
    end

    squareCount = 0;
    sharpCount = 0;
    obtuseCount = 0;
    sides = {}
    previousDirection = 0
end